// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package router

import (
	"github.com/go-chi/chi"
	"github.com/google/wire"
	"github.com/tiagoangelozup/horusec-admin/internal/http/handler"
	"github.com/tiagoangelozup/horusec-admin/internal/http/middleware"
	"github.com/tiagoangelozup/horusec-admin/internal/http/render"
)

// Injectors from wire.go:

func newRouter() (*router, error) {
	mux := chi.NewRouter()
	authorizer := middleware.NewAuthorizer()
	rendererRender := render.New()
	auth := handler.NewAuth()
	configEditing := handler.NewConfigEditing(rendererRender)
	configReading := handler.NewConfigReading(rendererRender)
	health := handler.NewHealth()
	routerHandlers := &handlers{
		Auth:          auth,
		ConfigEditing: configEditing,
		ConfigReading: configReading,
		Health:        health,
	}
	v := newAPIs(routerHandlers)
	v2, err := scanAssets()
	if err != nil {
		return nil, err
	}
	v3, err := scanPages(rendererRender)
	if err != nil {
		return nil, err
	}
	routerRouter := &router{
		Mux:    mux,
		authz:  authorizer,
		render: rendererRender,
		APIs:   v,
		Assets: v2,
		Pages:  v3,
	}
	return routerRouter, nil
}

// wire.go:

var providers = wire.NewSet(chi.NewRouter, handler.NewAuth, handler.NewConfigEditing, handler.NewConfigReading, handler.NewHealth, middleware.NewAuthorizer, render.New, newAPIs,
	scanAssets,
	scanPages, wire.Struct(new(handlers), "*"), wire.Struct(new(router), "*"),
)
